{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co.';\nconst isOk = response => {\n  return response.ok ? response.json() : Promise.reject(`Ошибка: ${response.status}`);\n};\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(isOk);\n};\nexport const authorization = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(isOk);\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(isOk);\n};\n\n// export function request(url, options) {\n//   // принимает два аргумента: урл и объект опций, как и `fetch`\n//   return fetch(url, options).then(isOk)\n// }\n\n// И теперь просто нужно заменить все fetch на request \n// и убрать дублирование проверки на ok. \n\n// Все остальное будет без изменений. Код станет чище\n// И даже можно поместить внутрь baseUrl, \n// чтобы не дублировать его в каждом запросе. \n// Тогда нужно будет передавать просто endpoint в вызов","map":{"version":3,"names":["BASE_URL","isOk","response","ok","json","Promise","reject","status","register","password","email","fetch","method","headers","body","JSON","stringify","then","authorization","checkToken","token"],"sources":["/Users/viktoriabogomakova/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co.';\n\nconst isOk = (response) => {\n  return response.ok\n    ? response.json()\n    : Promise.reject(`Ошибка: ${response.status}`);\n};\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email })\n  })\n  .then(isOk)\n};\n\nexport const authorization = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email })\n  })\n  .then(isOk)\n};\n\nexport const checkToken = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\" : `Bearer ${token}`\n      },\n    }).then(isOk)\n};\n\n// export function request(url, options) {\n//   // принимает два аргумента: урл и объект опций, как и `fetch`\n//   return fetch(url, options).then(isOk)\n// }\n\n// И теперь просто нужно заменить все fetch на request \n// и убрать дублирование проверки на ok. \n\n// Все остальное будет без изменений. Код станет чище\n// И даже можно поместить внутрь baseUrl, \n// чтобы не дублировать его в каждом запросе. \n// Тогда нужно будет передавать просто endpoint в вызов"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,gCAAgC;AAExD,MAAMC,IAAI,GAAIC,QAAQ,IAAK;EACzB,OAAOA,QAAQ,CAACC,EAAE,GACdD,QAAQ,CAACE,IAAI,CAAC,CAAC,GACfC,OAAO,CAACC,MAAM,CAAE,WAAUJ,QAAQ,CAACK,MAAO,EAAC,CAAC;AAClD,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC;IAAM,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,IAAI,CAAC;AACb,CAAC;AAED,OAAO,MAAMiB,aAAa,GAAGA,CAACT,QAAQ,EAAEC,KAAK,KAAK;EAChD,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC;IAAM,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,IAAI,CAAC;AACb,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAIC,KAAK,IAAK;EACjC,OAAOT,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAI,UAASO,KAAM;IACpC;EACF,CAAC,CAAC,CAACH,IAAI,CAAChB,IAAI,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}