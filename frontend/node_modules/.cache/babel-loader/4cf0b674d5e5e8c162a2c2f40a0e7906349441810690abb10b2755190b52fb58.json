{"ast":null,"code":"export var BASE_URL='https://auth.nomoreparties.co.';var isOk=function isOk(response){return response.ok?response.json():Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(response.status));};export var register=function register(password,email){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:password,email:email})}).then(isOk);};export var authorization=function authorization(password,email){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:password,email:email})}).then(isOk);};export var checkToken=function checkToken(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:\"GET\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(token)}}).then(isOk);};// export function request(url, options) {\n//   // принимает два аргумента: урл и объект опций, как и `fetch`\n//   return fetch(url, options).then(isOk)\n// }\n// И теперь просто нужно заменить все fetch на request \n// и убрать дублирование проверки на ok. \n// Все остальное будет без изменений. Код станет чище\n// И даже можно поместить внутрь baseUrl, \n// чтобы не дублировать его в каждом запросе. \n// Тогда нужно будет передавать просто endpoint в вызов","map":{"version":3,"names":["BASE_URL","isOk","response","ok","json","Promise","reject","concat","status","register","password","email","fetch","method","headers","body","JSON","stringify","then","authorization","checkToken","token"],"sources":["/Users/viktoriabogomakova/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co.';\n\nconst isOk = (response) => {\n  return response.ok\n    ? response.json()\n    : Promise.reject(`Ошибка: ${response.status}`);\n};\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email })\n  })\n  .then(isOk);\n};\n\nexport const authorization = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email })\n  })\n  .then(isOk)\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`,\n    },\n  }).then(isOk);\n};\n// export function request(url, options) {\n//   // принимает два аргумента: урл и объект опций, как и `fetch`\n//   return fetch(url, options).then(isOk)\n// }\n\n// И теперь просто нужно заменить все fetch на request \n// и убрать дублирование проверки на ok. \n\n// Все остальное будет без изменений. Код станет чище\n// И даже можно поместить внутрь baseUrl, \n// чтобы не дублировать его в каждом запросе. \n// Тогда нужно будет передавать просто endpoint в вызов"],"mappings":"AAAA,MAAO,IAAM,CAAAA,QAAQ,CAAG,gCAAgC,CAExD,GAAM,CAAAC,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAIC,QAAQ,CAAK,CACzB,MAAO,CAAAA,QAAQ,CAACC,EAAE,CACdD,QAAQ,CAACE,IAAI,CAAC,CAAC,CACfC,OAAO,CAACC,MAAM,0CAAAC,MAAA,CAAYL,QAAQ,CAACM,MAAM,CAAE,CAAC,CAClD,CAAC,CAED,MAAO,IAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,QAAQ,CAAEC,KAAK,CAAK,CAC3C,MAAO,CAAAC,KAAK,IAAAL,MAAA,CAAIP,QAAQ,YAAW,CACjCa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,QAAQ,CAARA,QAAQ,CAAEC,KAAK,CAALA,KAAM,CAAC,CAC1C,CAAC,CAAC,CACDO,IAAI,CAACjB,IAAI,CAAC,CACb,CAAC,CAED,MAAO,IAAM,CAAAkB,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIT,QAAQ,CAAEC,KAAK,CAAK,CAChD,MAAO,CAAAC,KAAK,IAAAL,MAAA,CAAIP,QAAQ,YAAW,CACjCa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,QAAQ,CAARA,QAAQ,CAAEC,KAAK,CAALA,KAAM,CAAC,CAC1C,CAAC,CAAC,CACDO,IAAI,CAACjB,IAAI,CAAC,CACb,CAAC,CAED,MAAO,IAAM,CAAAmB,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,KAAK,CAAK,CACnC,MAAO,CAAAT,KAAK,IAAAL,MAAA,CAAIP,QAAQ,cAAa,CACnCa,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAAP,MAAA,CAAYc,KAAK,CAClC,CACF,CAAC,CAAC,CAACH,IAAI,CAACjB,IAAI,CAAC,CACf,CAAC,CACD;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}